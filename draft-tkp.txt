


TLS Working Group                                         M. Marlinspike
Internet-Draft                                            T. Perrin, Ed.
Intended status: Standards Track                       November 25, 2012
Expires: May 29, 2013


                            TLS Key Pinning
                             draft-tkp.txt

Abstract

   This document defines TKP, which allows a TLS server to publish a
   list of public keys which clients can "pin" to the server's hostname.
   TLS connections to a pinned hostname must contain one of the pinned
   public keys, either in the server's X.509 certificate chain, or as a
   tack-signing key.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 29, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Marlinspike & Perrin      Expires May 29, 2013                  [Page 1]

Internet-Draft               TLS Key Pinning               November 2012


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Requirements notation  . . . . . . . . . . . . . . . . . . . .  4
   3.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  5
     3.1.  TKP life cycle . . . . . . . . . . . . . . . . . . . . . .  5
     3.2.  Pin life cycle . . . . . . . . . . . . . . . . . . . . . .  6
   4.  TKP Extension  . . . . . . . . . . . . . . . . . . . . . . . .  7
     4.1.  Definition of PinExtension . . . . . . . . . . . . . . . .  7
     4.2.  Explanation of PinExtension fields . . . . . . . . . . . .  8
       4.2.1.  PinElement fields  . . . . . . . . . . . . . . . . . .  8
       4.2.2.  PinDescription fields  . . . . . . . . . . . . . . . .  8
       4.2.3.  PinExtension fields  . . . . . . . . . . . . . . . . .  8
   5.  Client processing  . . . . . . . . . . . . . . . . . . . . . .  9
     5.1.  TKP pins . . . . . . . . . . . . . . . . . . . . . . . . .  9
     5.2.  High-level client processing . . . . . . . . . . . . . . .  9
     5.3.  Client processing details  . . . . . . . . . . . . . . . . 10
       5.3.1.  Check whether the TLS handshake is well-formed . . . . 10
       5.3.2.  Determine the store's status . . . . . . . . . . . . . 10
       5.3.3.  Pin activation (optional)  . . . . . . . . . . . . . . 11
   6.  Application protocols and TKP  . . . . . . . . . . . . . . . . 13
     6.1.  Pin scope  . . . . . . . . . . . . . . . . . . . . . . . . 13
     6.2.  TLS negotiation  . . . . . . . . . . . . . . . . . . . . . 13
     6.3.  Certificate verification . . . . . . . . . . . . . . . . . 13
   7.  Advice . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
     7.1.  For server operators . . . . . . . . . . . . . . . . . . . 14
     7.2.  For client implementers  . . . . . . . . . . . . . . . . . 14
   8.  Security considerations  . . . . . . . . . . . . . . . . . . . 15
     8.1.  For server operators . . . . . . . . . . . . . . . . . . . 15
     8.2.  For client implementers  . . . . . . . . . . . . . . . . . 15
     8.3.  Note on algorithm agility  . . . . . . . . . . . . . . . . 15
   9.  IANA considerations  . . . . . . . . . . . . . . . . . . . . . 16
     9.1.  New entry for the TLS ExtensionType Registry . . . . . . . 16
   10. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 17
   11. Normative references . . . . . . . . . . . . . . . . . . . . . 18
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 19















Marlinspike & Perrin      Expires May 29, 2013                  [Page 2]

Internet-Draft               TLS Key Pinning               November 2012


1.  Introduction

   Traditionally, a TLS client verifies a TLS server's public key using
   a certificate chain issued by some public CA.  "Pinning" is a way for
   clients to obtain increased certainty in server public keys.  Clients
   that employ pinning check for some constant "pinned" element of the
   TLS connection when contacting a particular TLS host.

   TKP lets a server publish a "pin description" listing the public keys
   it would like to be pinned to.  Once a client has seen the same pin
   description multiple times, the client will "activate" a "pin"
   between the hostname and description for a period equal to the length
   of time the pair has been observed for.  This "pin activation"
   algorithm limits the impact of bad pins resulting from transient
   network attacks or operator error.

   TKP pins are easily shared between clients.  For example, a TKP
   client may scan the internet to discover TKP pins, then publish these
   pins through some 3rd-party trust infrastructure for other clients to
   rely upon.































Marlinspike & Perrin      Expires May 29, 2013                  [Page 3]

Internet-Draft               TLS Key Pinning               November 2012


2.  Requirements notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].














































Marlinspike & Perrin      Expires May 29, 2013                  [Page 4]

Internet-Draft               TLS Key Pinning               November 2012


3.  Overview

3.1.  TKP life cycle

   A server operator using TKP may perform several processes:

   Creating a pin description:  The server operator first chooses the
      pin description to use for a set of hostnames.

   Deploying pin descriptions:  For each hostname, pin descriptions are
      deployed to TLS servers in a two-stage process.  First, each TLS
      server associated with the hostname publishes the pin description
      along with a matching X.509 chain or tack.  Once this is
      completed, the pin descriptions are activated by setting the
      "activation flag" on each server.

   Deactivating pin descriptions:  If a server operator wishes to stop
      deploying TKP, all pin descriptions for a hostname can be
      deactivated via the activation flag, allowing the server to remove
      the pin descriptions within 30 days (at the most).

   Overlapping pin descriptions:  If a server operator wishes to change
      the pin description a hostname is pinned to, the server can
      publish a new description alongside the old one.  This lets
      clients activate pins for the new description prior to the older
      pins being deactivated.

























Marlinspike & Perrin      Expires May 29, 2013                  [Page 5]

Internet-Draft               TLS Key Pinning               November 2012


3.2.  Pin life cycle

   A TKP pin associates a hostname and a pin description (or a hash of a
   pin description).  Pins are grouped into "pin stores".  A client may
   populate its pin stores by either performing "pin activation"
   directly, or by querying some other party.  For example, a client
   application may have a store for pin activation as well as a store
   whose contents are periodically fetched from a server.

   Whenever a client performing "pin activation" sees a hostname and pin
   description pair not represented in the "pin activation" pin store,
   an inactive pin is created.  Every subsequent time the client sees
   the same pair, the pin is "activated" for a period equal to the
   timespan between the first time the pin was seen and the most recent
   time, up to a maximum period of 30 days.

   A pin store may contain up to two pins per hostname.  This allows for
   overlapping pins when a server is securely transitioning from one pin
   to another.  If both pins are simultaneously active, then the server
   must satisfy both of them by presenting a pair of descriptions.































Marlinspike & Perrin      Expires May 29, 2013                  [Page 6]

Internet-Draft               TLS Key Pinning               November 2012


4.  TKP Extension

4.1.  Definition of PinExtension

   A new TLS ExtensionType ("tkp") is defined and MAY be included by a
   TLS client in the ClientHello message defined in [RFC5246].

   enum {tkp(TBD), (65535)} ExtensionType;

   The "extension_data" field of this ClientHello extension SHALL be
   empty.  A TLS server which is not resuming a TLS session MAY respond
   with an extension of type "tkp" in the ServerHello.  The
   "extension_data" field of this ServerHello extension SHALL contain a
   "PinExtension", as defined below using the TLS presentation language
   from [RFC5246].

   enum { x509_key(0), tack_signing_key(1) } PinElementType;

   struct {
     PinElementType element_type;
     uint8          element_hash[32];        /* sha256 */
   } PinElement;                             /* 33 bytes */

   struct{
     uint32         flags;
     PinElement     elements<0...528>;       /* 1...16 elements */
   } PinDescription;                         /* 34...532 bytes */

   struct {
     uint8          activation_flags;
     PinDescription descriptions<34...1064>; /* 1 or 2 descriptions */
   } PinExtension;                           /* 35...1065 bytes */



















Marlinspike & Perrin      Expires May 29, 2013                  [Page 7]

Internet-Draft               TLS Key Pinning               November 2012


4.2.  Explanation of PinExtension fields

4.2.1.  PinElement fields

   element_type:  This field specifies whether the PinElement contains a
      hash of an X.509 certificate's SubjectPublicKeyInfo, or a hash of
      a 64-byte tack-signing key.

   element_hash:  This field is a SHA256 hash of either an X.509
      SubjectPublicKeyInfo or a tack signing key, as determined by the
      preceding "element_type".

4.2.2.  PinDescription fields

   flags:  This field provides flags associated with the pin
      description.  These flags may specify desired error-handling
      behaviors or other aspects of client handling (TBD).

   elements:  This field contains 1...16 PinElements belonging to this
      PinDescription.

4.2.3.  PinExtension fields

   activation_flags:  This field contains "activation flags" for the
      extension's PinDescriptions.  If the low order bit is set, the
      first description is considered active.  If the next lowest bit is
      set, the second description is considered active.  An active
      description MAY be used by the pin activation algorithm in
      Section 5.3.3 to create, activate, and extend the activation of
      TKP pins.

   elements:  This field contains 1 or 2 PinDescriptions.



















Marlinspike & Perrin      Expires May 29, 2013                  [Page 8]

Internet-Draft               TLS Key Pinning               November 2012


5.  Client processing

5.1.  TKP pins

   A client SHALL have a local store of pins, and MAY have multiple
   stores.  Each pin store consists of a map associating fully qualified
   DNS hostnames with either one or two sets of the following values:

   Initial time:  A timestamp noting when this pin was created.

   End time:  A timestamp determining the pin's "active period".  If set
      to zero or a time in the past, the pin is "inactive".  If set to a
      future time, the pin is "active" until that time.

   PinDescription (or hash):  A PinDescription or a cryptographically-
      secure, second preimage-resistant hash of a PinDescription.

   A hostname along with the above values comprises a "TKP pin".  Thus,
   each store can hold up to two pins for a hostname (however, those two
   pins MUST reference different PinDescriptions).  A pin "matches" a
   PinDescription if it contains the PinDescription or its hash.  A pin
   is "relevant" if its hostname equals the TLS server's hostname.

5.2.  High-level client processing

   A TKP client SHALL send the "tkp" extension defined previously, and
   SHALL send the "server_name" extension from [RFC6066].  If not
   resuming a session, the server MAY respond with a PinExtension.
   Regardless of whether a PinExtension is returned, the client SHALL
   perform the following steps prior to using the connection:

   1.  Check whether the TLS handshake is "well-formed".

   2.  For each pin store, do:

       A.  Determine the store's status.

       B.  Perform pin activation (optional).













Marlinspike & Perrin      Expires May 29, 2013                  [Page 9]

Internet-Draft               TLS Key Pinning               November 2012


   These steps SHALL be performed in order.  If there is any error, the
   client SHALL send a fatal error alert and close the connection,
   skipping the remaining steps (see Section 5.3 for details).

   Based on step 2A, each store will report one of three statuses for
   the connection: "accepted", "rejected", or "unpinned".  A rejected
   connection might indicate a network attack.  If the connection is
   rejected the client MAY send a fatal "access_denied" error alert and
   close the connection.

   A client MAY perform additional verification steps before using an
   accepted or unpinned connection.  See Section 6.3 for an example.

5.3.  Client processing details

5.3.1.  Check whether the TLS handshake is well-formed

   A TLS handshake is "well-formed" if the following are true.  Unless
   otherwise specified, if any of the following are false a
   "bad_certificate" fatal error alert SHALL be sent.

   1.  The handshake protocol negotiates a cryptographically secure
       ciphersuite and finishes succesfully.

   2.  If a PinExtension is present then all length fields are correct,
       and "activation_flags" is <= 3.

   3.  If there are two PinDescriptions, they are not identical.

   4.  For each PinDescription, there is at least one PinElement that
       either (a) is of type "x509_key" and refers to a
       SubjectPublicKeyInfo from the server's certificate chain, or (b)
       is of type "tack_signing_key" and refers to a tack signing key
       from a server tack.

5.3.2.  Determine the store's status

   If there is a relevant active pin without a matching description,
   then the connection is "rejected".  If the connection is not rejected
   and there is a relevant active pin with a matching description, then
   the connection is "accepted".  Otherwise, the connection is
   "unpinned".









Marlinspike & Perrin      Expires May 29, 2013                 [Page 10]

Internet-Draft               TLS Key Pinning               November 2012


5.3.3.  Pin activation (optional)

   The TLS connection MAY be used to create, delete, and activate pins.
   This "pin activation algorithm" is optional; a client MAY rely on an
   external source of pins.  If the connection was "rejected" by the
   previous processing step, then pin activation is skipped.

   The first step in pin activation is to evaluate each relevant pin
   (there may be one or two):

   1.  If a pin has no matching description, its handling will depend on
       whether the pin is active.  If active, the connection will have
       been rejected, skipping pin activation.  If inactive, the pin
       SHALL be deleted, since it is contradicted by the connection.

   2.  If a pin has a matching description, its handling will depend on
       whether the description is active.  If inactive, the pin is left
       unchanged.  If active, the pin SHALL have its "end time" set
       based on the current, initial, and end times:

       end = current + MIN(30 days, current - initial)

   In sum: (1) deletes unmatched inactive pins; and (2) activates
   matched pins with active descriptions.

   The remaining step in pin activation is to add new inactive pins for
   any unmatched active descriptions.  Each new pin uses the server's
   hostname, the description (or its hash),?? an "initial time" set to
   the current time, and an "end time" of zero.

   (Note that there are always sufficient empty "slots" in the pin store
   for adding new pins without exceeding two pins per hostname.  This is
   because the number of matching pins equals the number of matching
   descriptions, so the number of empty pin slots equals the number of
   unmatched descriptions.)

   The following tables summarize this behavior from the perspective of
   a pin.  You can follow the lifecycle of a single pin from "New
   inactive pin" to "Delete pin".












Marlinspike & Perrin      Expires May 29, 2013                 [Page 11]

Internet-Draft               TLS Key Pinning               November 2012


   Relevant pin is active:

   +----------------------+--------------------+-----------------------+
   | Pin matches a        | Description is     | Result                |
   | description          | active             |                       |
   +----------------------+--------------------+-----------------------+
   | Yes                  | Yes                | Extend activation     |
   |                      |                    | period                |
   |                      |                    |                       |
   | Yes                  | No                 | -                     |
   |                      |                    |                       |
   | No                   | -                  | (Connection rejected) |
   +----------------------+--------------------+-----------------------+

   Relevant pin is inactive:

   +---------------------------+-----------------------+--------------+
   | Pin matches a description | Description is active | Result       |
   +---------------------------+-----------------------+--------------+
   | Yes                       | Yes                   | Activate pin |
   |                           |                       |              |
   | Yes                       | No                    | -            |
   |                           |                       |              |
   | No                        | -                     | Delete pin   |
   +---------------------------+-----------------------+--------------+

   Description doesn't match any relevant pin:

          +---------------------------------+------------------+
          | Unmatched description is active | Result           |
          +---------------------------------+------------------+
          | Yes                             | New inactive pin |
          |                                 |                  |
          | No                              | -                |
          +---------------------------------+------------------+
















Marlinspike & Perrin      Expires May 29, 2013                 [Page 12]

Internet-Draft               TLS Key Pinning               November 2012


6.  Application protocols and TKP

6.1.  Pin scope

   TKP pins are specific to a particular application protocol.  In other
   words, a pin for HTTPS at "example.com" implies nothing about POP3 or
   SMTP at "example.com".

6.2.  TLS negotiation

   Some application protocols negotiate TLS as an optional feature (e.g.
   SMTP using STARTTLS [RFC3207]).  If such a server fails to negotiate
   TLS and there are relevant active pins, then the connection is
   rejected by the pin.  If the server fails to negotiate TLS, then any
   relevant, inactive pins SHALL be deleted.  Note that these steps are
   taken despite the absence of a TLS connection.

6.3.  Certificate verification

   A TKP client MAY choose to perform some form of certificate
   verification in addition to TKP processing.  When combining
   certificate verification and TKP processing, the TKP processing
   described in Section 5 SHALL be followed, with the exception that TKP
   processing MAY be terminated early (or skipped) if some fatal
   certificate error is discovered.

   If TKP processing and certificate verification both complete without
   a fatal error, the client SHALL apply some policy to decide whether
   to accept the connection.  The policy is up to the client.  An
   example policy would be to accept the connection only if it passes
   certificate verification and is not rejected by a pin.




















Marlinspike & Perrin      Expires May 29, 2013                 [Page 13]

Internet-Draft               TLS Key Pinning               November 2012


7.  Advice

7.1.  For server operators

   Aliases:  A TLS server may be referenced by multiple hostnames.
      Clients may pin any of these hostnames.  Server operators should
      be careful when using DNS aliases that hostnames are not pinned
      inadvertently.

   Pin activation:  Pin descriptions should only be activated once all
      TLS servers sharing the same hostname have a description.
      Otherwise, a client may activate a description by contacting one
      server, then contact a different server at the same hostname that
      does not yet have a description.

   Pin deactivation:  If all servers at a hostname deactivate their pin
      descriptions (by clearing the activation flags), all existing pins
      for the hostname will eventually become inactive.  The
      descriptions can be removed after a time interval equal to the
      maximum active period of any affected pins (30 days at most).

   Pin overlap:  When publishing overlapping descriptions, the old and
      new descriptions SHOULD be active simultaneously for at least 60
      days.  This ensures that any pin activation client who is
      contacting the server at intervals of 30 days or less will not
      have its activation periods interrupted.  Example process:
      activate new descriptions; wait 60 days; deactivate old
      descriptions; wait 30 days; remove old descriptions.

7.2.  For client implementers

   Sharing pin information:  It is possible for a client to maintain a
      pin store based entirely on its own TLS connections.  However,
      such a client runs the risk of creating incorrect pins or failing
      to keep its pins active.  Clients are advised to make use of 3rd-
      party trust infrastructure so that pin data can be aggregated and
      shared.  This will require additional protocols outside the scope
      of this document.













Marlinspike & Perrin      Expires May 29, 2013                 [Page 14]

Internet-Draft               TLS Key Pinning               November 2012


8.  Security considerations

8.1.  For server operators

   HTTP cookies [RFC6265] set by a pinned host can be stolen by a
   network attacker who can forge web and DNS responses so as to cause a
   client to send the cookies to a phony subdomain of the pinned host.
   To prevent this, TKP HTTPS Servers SHOULD set the "secure" attribute
   and omit the "domain" attribute on all security-sensitive cookies,
   such as session cookies.  These settings tell the browser that the
   cookie should only be presented back to the originating host (not its
   subdomains), and should only be sent over HTTPS (not HTTP) [RFC6265].

8.2.  For client implementers

   A TKP pin store may contain private details of the client's
   connection history.  An attacker may be able to access this
   information by hacking or stealing the client.  Some information
   about the client's connection history could also be gleaned by
   observing whether the client accepts or rejects connections to phony
   TLS servers without correct pin descriptions.  To mitigate these
   risks, a TKP client SHOULD allow the user to edit or clear the pin
   store.

   Aside from rejecting TLS connections, clients SHOULD NOT take any
   actions which would reveal to a network observer the state of the
   client's pin store, as this would allow an attacker to know in
   advance whether a "man-in-the-middle" attack on a particular TLS
   connection will succeed or be detected.

   An attacker may attempt to flood a client with spurious descriptions
   for different hostnames, causing the client to delete old pins to
   make space for new ones.  To defend against this, clients SHOULD NOT
   delete active pins to make space for new pins.  Clients instead
   SHOULD delete inactive pins.  If there are no inactive pins to
   delete, then the pin store is full and there is no space for new
   pins.  To select an inactive pin for deletion, the client SHOULD
   delete the pin with the oldest "end time".

8.3.  Note on algorithm agility

   If the need arises for pin descriptions using different cryptographic
   algorithms (e.g., if SHA256 is known to be weak), a "v2" version of
   TKP could be defined, requiring assignment of a new TLS Extension
   number.  Pin descriptions as defined in this document would then be
   known as "v1" descriptions.





Marlinspike & Perrin      Expires May 29, 2013                 [Page 15]

Internet-Draft               TLS Key Pinning               November 2012


9.  IANA considerations

9.1.  New entry for the TLS ExtensionType Registry

   IANA is requested to add an entry to the existing TLS ExtensionType
   registry, defined in [RFC5246], for "tkp"(TBD) as defined in this
   document.












































Marlinspike & Perrin      Expires May 29, 2013                 [Page 16]

Internet-Draft               TLS Key Pinning               November 2012


10.  Acknowledgements

   Valuable feedback has been provided by Adam Langley, Chris Palmer,
   Nate Lawson, and Joseph Bonneau.















































Marlinspike & Perrin      Expires May 29, 2013                 [Page 17]

Internet-Draft               TLS Key Pinning               November 2012


11.  Normative references

   [FIPS180-2]
              National Institute of Standards and Technology, "Secure
              Hash Standard", FIPS PUB 180-2, August 2002, <http://
              csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf>.

   [FIPS186-3]
              National Institute of Standards and Technology, "Digital
              Signature Standard", FIPS PUB 186-3, June 2009, <http://
              csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC3207]  Hoffman, P., "SMTP Service Extension for Secure SMTP over
              Transport Layer Security", RFC 3207, February 2002.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, October 2006.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246, August 2008.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, May 2008.

   [RFC5480]  Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,
              "Elliptic Curve Cryptography Subject Public Key
              Information", RFC 5480, March 2009.

   [RFC5905]  Mills, D., Martin, J., Burbank, J., and W. Kasch, "Network
              Time Protocol Version 4: Protocol and Algorithms
              Specification", RFC 5905, June 2010.

   [RFC6066]  Eastlake, D., "Transport Layer Security (TLS) Extensions:
              Extension Definitions", RFC 6066, January 2011.

   [RFC6090]  McGrew, D., Igoe, K., and M. Salter, "Fundamental Elliptic
              Curve Cryptography Algorithms", RFC 6090, February 2011.

   [RFC6265]  Barth, A., "HTTP State Management Mechanism", RFC 6265,
              April 2011.






Marlinspike & Perrin      Expires May 29, 2013                 [Page 18]

Internet-Draft               TLS Key Pinning               November 2012


Authors' Addresses

   Moxie Marlinspike


   Trevor Perrin (editor)

   Email: tkp@trevp.net











































Marlinspike & Perrin      Expires May 29, 2013                 [Page 19]


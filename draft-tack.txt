


TLS Working Group                                         M. Marlinspike
Internet-Draft                                            T. Perrin, Ed.
Intended status: Standards Track                       November 22, 2012
Expires: May 26, 2013


                 Trust Assertions for Certificate Keys
                             draft-tack.txt

Abstract

   This document defines TACK, a TLS Extension that enables a TLS server
   to support "pinning" to a self-chosen signing key (aka "TACK key").
   A client contacting a pinned host will require the server to present
   a "tack" containing the TACK key and a signature from the TACK key
   over the TLS server's public key.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 26, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Marlinspike & Perrin      Expires May 26, 2013                  [Page 1]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.2.  Requirements notation  . . . . . . . . . . . . . . . . . .  3
   2.  TACK Extension . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.1.  Definition of TackExtension  . . . . . . . . . . . . . . .  4
     2.2.  Explanation of TackExtension fields  . . . . . . . . . . .  5
       2.2.1.  Tack fields  . . . . . . . . . . . . . . . . . . . . .  5
       2.2.2.  TackExtension fields . . . . . . . . . . . . . . . . .  5
   3.  Client processing  . . . . . . . . . . . . . . . . . . . . . .  6
     3.1.  Validating tacks . . . . . . . . . . . . . . . . . . . . .  6
     3.2.  Comparing pins and tacks . . . . . . . . . . . . . . . . .  6
   4.  Advice . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7
     4.1.  For server operators . . . . . . . . . . . . . . . . . . .  7
     4.2.  For client implementers  . . . . . . . . . . . . . . . . .  7
   5.  Security considerations  . . . . . . . . . . . . . . . . . . .  8
     5.1.  For server operators . . . . . . . . . . . . . . . . . . .  8
     5.2.  Note on algorithm agility  . . . . . . . . . . . . . . . .  8
   6.  IANA considerations  . . . . . . . . . . . . . . . . . . . . .  9
     6.1.  New entry for the TLS ExtensionType Registry . . . . . . .  9
   7.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 10
   8.  Normative references . . . . . . . . . . . . . . . . . . . . . 11
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 12



























Marlinspike & Perrin      Expires May 26, 2013                  [Page 2]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


1.  Introduction

1.1.  Overview

   Traditionally, a TLS client verifies a TLS server's public key using
   a certificate chain issued by some public CA.  "Pinning" is a way for
   clients to obtain increased certainty in server public keys.  Clients
   that employ pinning check for some constant "pinned" element of the
   TLS connection when contacting a particular TLS host.

   TACK allows clients to pin to a server-chosen signing key, known as a
   "TACK key", which signs the server's TLS keys.  This enables pinning
   without limiting a site's flexibility to deploy different
   certificates and TLS keys on different servers or at different times.
   Since pins can be based on TACK keys (instead of CA keys), trust in
   CAs is not required.  Additionally, a TACK key may be used to revoke
   compromised TLS private keys, and a pair of "overlapping" TACK keys
   may be used to quickly introduce a new TACK key if an older one has
   become compromised or suspect.

1.2.  Requirements notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].


























Marlinspike & Perrin      Expires May 26, 2013                  [Page 3]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


2.  TACK Extension

2.1.  Definition of TackExtension

   A new TLS ExtensionType ("tack") is defined and MAY be included by a
   TLS client in the ClientHello message defined in [RFC5246].

   enum {tack(TBD), (65535)} ExtensionType;

   The "extension_data" field of this ClientHello extension SHALL be
   empty.  A TLS server which is not resuming a TLS session MAY respond
   with an extension of type "tack" in the ServerHello.  The
   "extension_data" field of this ServerHello extension SHALL contain a
   "TackExtension", as defined below using the TLS presentation language
   from [RFC5246].

   struct {
      opaque public_key[64];
      uint8  min_generation;
      uint8  generation;
      uint32 expiration;
      opaque target_hash[32];
      opaque signature[64];
   } tack;  /* 166 bytes */

   struct {
      Tack tacks<166...332>   /* 1 or 2 Tacks */
   } TackExtension;























Marlinspike & Perrin      Expires May 26, 2013                  [Page 4]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


2.2.  Explanation of TackExtension fields

2.2.1.  Tack fields

   public_key:  This field specifies the tack's public key.  The field
      contains a pair of integers (x, y) representing a point on the
      elliptic curve P-256 defined in [FIPS186-3].  Each integer is
      encoded as a 32-byte octet string using the Integer-to-Octet-
      String algorithm from [RFC6090], and these strings are
      concatenated with the x value first.  (NOTE: This is equivalent to
      an uncompressed subjectPublicKey from [RFC5480], except that the
      initial 0x04 byte is omitted).

   min_generation:  This field publishes a min_generation value for the
      TACK key.

   generation:  This field assigns each tack a generation.  Generations
      less than a published min_generation from the TACK key are
      considered revoked.

   expiration:  This field specifies a time after which the tack is
      considered expired.  The time is encoded as the number of minutes,
      excluding leap seconds, after midnight UTC, January 1 1970.

   target_hash:  This field is a hash of the TLS server's
      SubjectPublicKeyInfo [RFC5280] using the SHA256 algorithm from
      [FIPS180-2].  The SubjectPublicKeyInfo is typically conveyed as
      part of the server's X.509 end-entity certificate.

   signature:  This field is an ECDSA signature by the tack's public key
      over the 8 byte ASCII string "tack_sig" followed by the contents
      of the tack prior to the "signature" field (i.e. the preceding 102
      bytes).  The field contains a pair of integers (r, s) representing
      an ECDSA signature as defined in [FIPS186-3], using curve P-256
      and SHA256.  Each integer is encoded as a 32-byte octet string
      using the Integer-to-Octet-String algorithm from [RFC6090], and
      these strings are concatenated with the r value first.

2.2.2.  TackExtension fields

   tacks:  This field provides the server's tack(s).  It SHALL contain 1
      or 2 tacks.









Marlinspike & Perrin      Expires May 26, 2013                  [Page 5]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


3.  Client processing

3.1.  Validating tacks

   Upon receiving a TackExtension, the client SHALL validate each tack
   by checking that the following statements are true.  If not, the
   client SHALL send a fatal error alert and close the connection.  The
   error alert SHALL be "bad_certificate" unless otherwise specified.

   1.  If there are two tacks, they have different public keys.

   2.  Each tack's "generation" is >= the tack's "min_generation".

   3.  Each "expiration" specifies a time in the future, otherwise the
       client SHALL send a fatal "certificate_expired" error alert.

   4.  Each "target_hash" is a correct hash of the SubjectPublicKeyInfo.

   5.  Each "signature" is a correct ECDSA signature.

3.2.  Comparing pins and tacks

   A client MAY wish to compare valid tacks against one or two TACK pins
   which are relevant to the connection.  Each TACK pin contains:

   TACK public key (or hash):  A public key or a cryptographically-
      secure, second preimage-resistant hash of a public key.  A pin
      "matches" a tack if they reference the same public key.

   Min_generation:  A single byte used to detect revoked tacks.

   If a pin has a matching, valid tack with a generation less the pin's
   min_generation, the tack is revoked.  If the tack has a
   min_generation greater than the pin's min_generation, the pin's
   min_generation MAY be updated to the tack's value for future use.

   If a pin has a matching, valid, nonrevoked tack, the pin and
   connection "confirm" each other.  Otherwise, the pin and connection
   "contradict" each other.

   It is undefined how the client receives TACK pins.  It is also
   undefined how the client responds to revoked tacks or confirmed vs
   contradicted connections.  These aspects are left to other
   specifications and client policy.  However, if a client closes a TLS
   connection due to a revoked tack, the client SHOULD send a fatal
   "certificate_revoked" alert; if a client closes a connection due to a
   contradicted pin, the client SHOULD send an "access_denied" alert.




Marlinspike & Perrin      Expires May 26, 2013                  [Page 6]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


4.  Advice

4.1.  For server operators

   Key reuse:  All servers that are pinned to a single TACK key are able
      to impersonate each other, since clients will perceive their tacks
      as equivalent.  Thus, TACK keys SHOULD NOT be reused with
      different hostnames unless these hostnames are closely related.
      Examples where it would be safe to reuse a TACK key are hostnames
      aliased to the same host, hosts sharing the same TLS key, or
      hostnames for a group of near-identical servers.

   Generations:  To revoke older generations of tacks, the server
      operator SHOULD first provide all servers with a new generation of
      tacks, and only then provide servers with new tacks containing the
      new min_generation.  Otherwise, a client may receive a
      min_generation update from one server but then try to contact an
      older-generation server which has not yet been updated.

   Tack expiration:  When TACK is used in conjunction with certificates
      it is recommended to set the tack expiration equal to the end-
      entity certificate (or a later date), allowing the tack and
      certificate to both be replaced at the same time.  Alternatively,
      short-lived tacks may be used so that a compromised TLS private
      key has limited value to an attacker.

4.2.  For client implementers

   Clock synchronization:  A client SHOULD take measures to prevent
      tacks from being erroneously rejected as expired due to an
      inaccurate client clock.  Such methods MAY include using time
      synchronization protocols such as NTP [RFC5905], or accepting
      seemingly-expired tacks as "well-formed" if they expired less than
      T minutes ago, where T is a "tolerance bound" set to the client's
      maximum expected clock error.
















Marlinspike & Perrin      Expires May 26, 2013                  [Page 7]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


5.  Security considerations

5.1.  For server operators

   All servers pinned to the same TACK key can impersonate each other
   (see Section 4.1).  Think carefully about this risk if using the same
   TACK key for multiple hostnames.

   Make backup copies of the TACK private key and keep all copies in
   secure locations where they can't be compromised.

   A TACK private key MUST NOT be used to perform any non-TACK
   cryptographic operations.  For example, using a TACK key for email
   encryption, code-signing, or any other purpose MUST NOT be done.

   HTTP cookies [RFC6265] set by a pinned host can be stolen by a
   network attacker who can forge web and DNS responses so as to cause a
   client to send the cookies to a phony subdomain of the pinned host.
   To prevent this, TACK HTTPS Servers SHOULD set the "secure" attribute
   and omit the "domain" attribute on all security-sensitive cookies,
   such as session cookies.  These settings tell the browser that the
   cookie should only be presented back to the originating host (not its
   subdomains), and should only be sent over HTTPS (not HTTP) [RFC6265].

5.2.  Note on algorithm agility

   If the need arises for tacks using different cryptographic algorithms
   (e.g., if SHA256 or ECDSA are shown to be weak), a "v2" version of
   tacks could be defined, requiring assignment of a new TLS Extension
   number.  Tacks as defined in this document would then be known as
   "v1" tacks.




















Marlinspike & Perrin      Expires May 26, 2013                  [Page 8]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


6.  IANA considerations

6.1.  New entry for the TLS ExtensionType Registry

   IANA is requested to add an entry to the existing TLS ExtensionType
   registry, defined in [RFC5246], for "tack"(TBD) as defined in this
   document.












































Marlinspike & Perrin      Expires May 26, 2013                  [Page 9]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


7.  Acknowledgements

   Valuable feedback has been provided by Adam Langley, Chris Palmer,
   Nate Lawson, and Joseph Bonneau.















































Marlinspike & Perrin      Expires May 26, 2013                 [Page 10]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


8.  Normative references

   [FIPS180-2]
              National Institute of Standards and Technology, "Secure
              Hash Standard", FIPS PUB 180-2, August 2002, <http://
              csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf>.

   [FIPS186-3]
              National Institute of Standards and Technology, "Digital
              Signature Standard", FIPS PUB 186-3, June 2009, <http://
              csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246, August 2008.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, May 2008.

   [RFC5480]  Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,
              "Elliptic Curve Cryptography Subject Public Key
              Information", RFC 5480, March 2009.

   [RFC5905]  Mills, D., Martin, J., Burbank, J., and W. Kasch, "Network
              Time Protocol Version 4: Protocol and Algorithms
              Specification", RFC 5905, June 2010.

   [RFC6090]  McGrew, D., Igoe, K., and M. Salter, "Fundamental Elliptic
              Curve Cryptography Algorithms", RFC 6090, February 2011.

   [RFC6265]  Barth, A., "HTTP State Management Mechanism", RFC 6265,
              April 2011.















Marlinspike & Perrin      Expires May 26, 2013                 [Page 11]

Internet-Draft    Trust Assertions for Certificate Keys    November 2012


Authors' Addresses

   Moxie Marlinspike


   Trevor Perrin (editor)

   Email: tack@trevp.net











































Marlinspike & Perrin      Expires May 26, 2013                 [Page 12]

